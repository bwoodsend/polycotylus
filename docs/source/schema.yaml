# An exhaustive list of all valid options settable in the ``polycotylus.yaml``.
# Options are grouped into non-front-end specific (i.e. libraries) and front-end
# (GUIs or CLI tool) specific categories. Each category is ordered with the
# commonly needed options first and the options with relatively all-encompassing
# defaults last. (Feedback wanted of whether this is a helpful structure or if I
# should stick to the conventional alphabetic ordering.)

# If unsure where to start, the following is a fairly ubiquitous base step from
# which you can try your first build and then follow whatever errors that leads
# you to::
#
#    dependencies:
#      test:
#        pip: pytest

# Note that this file's format is dubbed as *YAML* but its parser is strictyaml_
# which removes_ some of YAML's less practical features such as embedded JSON
# and implicit typing. Additionally, `polycotylus` uses a custom *whitespace
# delimited list* validator for denoting lists of packages (e.g. write ``numpy
# requests pyperclip`` instead of ``["numpy", "requests", "pyperclip"]``).

# .. _strictyaml: https://hitchdev.com/strictyaml/
# .. _removes: https://hitchdev.com/strictyaml/features-removed/

# ---------------
# Generic Options
# ---------------

# Options that are applicable to packages of any type (i.e. GUIs, CLIs or libraries).

dependencies:
  # A project's dependencies are divided up into three categories:
  # `dependencies.build`, `dependencies.run` and `dependencies.test`.
  # Each of those categories are then in-turn broken down into:
  #
  #   - ``pip``: Pip/PyPI packages.
  #   - ``python``: Python's optional stdlib dependencies (e.g. ``tkinter`` or ``sqlite3``) which may be packaged separately from Python itself for size, licensing or inexplicable reasons.
  #   - ``alpine|arch|debian|fedora|manjaro|ubuntu|void``: Linux packages installed by each distribution's native package manager.

  run:
    # Dependencies needed to run the application/package.

    pip: numpy humanize
      # Runtime dependencies that would normally be installed with ``pip``. This
      # field automatically includes dependencies declared in the
      # ``dependencies`` section in your ``pyproject.toml``. (You should never
      # set this field in practice.)

    python: bz2 ctypes curses curses.panel dbm dbm.gnu dbm.ndbm decimal lzma readline sqlite3 tkinter
      # Python optional dependencies, used at runtime: If you ``import`` any of
      # these libraries, list them here. `polycotylus` will ensure that their
      # Linux distributions' equivalents are installed.

    alpine: ffmpeg-libs xsetroot
    arch manjaro: ffmpeg xorg-xsetroot
    debian ubuntu: ffmpeg
    fedora: ffmpeg-free xsetroot
    void: ffmpeg xsetroot
      # External command line tools or runtime libraries used by the
      # application. Similar distributions with identical dependencies (e.g.
      # ``manjaro`` and ``arch``) may be written as one key-value pair to reduce
      # duplicity.

  build:
    # Dependencies needed to compile the package from source. That is, anything
    # needed to run ``pip wheel --no-build-isolation .``

    pip:
      # Build dependencies from PyPI: This field is discouraged in favour of the
      # ``[build-system]/requires`` section of the ``pyproject.toml`` where
      # `polycotylus` will automatically pick them up. ``pip`` and ``wheel`` are
      # also automatically added to this list on distributions that don't handle
      # this themselves.

    alpine: python3-dev gcc musl-dev
    arch manjaro: gcc
    debian ubuntu: gcc
    fedora: python3-devel gcc
    void: python3-devel gcc
      # System build dependencies: This is where packages containing compiled
      # extension modules will need to add the appropriate compiler for your
      # chosen programming language and, for distributions that use them, the
      # ``-dev`` variants of any C libraries linked against. The example shows
      # the bare minimum required for any extension module written in C.

  test:
    # Anything not already listed in the `dependencies.run` category needed to
    # run the test suite.

    pip: -r test-requirements.txt .[test]
      # Test dependencies normally installed with ``pip``. If defined in a
      # requirements.txt or as an optional dependency group, use the usual ``-r
      # requirements.txt`` or ``.[group-name]`` syntaxes respectively. You'll
      # find that some of your favourite pytest plugins aren't available on all
      # Linux distributions, in which case, you will either have to submit those
      # plugins yourself or make do without them. Be aware that Linux
      # distributions (particularly Fedora) dislike non-functional test
      # dependencies such as linters, formatters or coverage tools. If you use
      # these, you're recommended to split them out into a separate extras group
      # or requirements file and only have `polycotylus` use the lesser group.

source_url:
  # A URL where the project's source code can be downloaded from. The default is
  # to download an sdist from PyPI. If your project puts only wheels on PyPI or
  # isn't on PyPI, you won't be able to use this default. Some examples are
  # listed below for common git hosts. Assuming an organisation called ``foo``
  # and project called ``bar``::
  #
  #   https://bitbucket.org/foo/bar/downloads/bar-{version}.tar.xz
  #   https://codeberg.org/foo/bar/archive/{version}.tar.gz
  #   https://gitea.com/foo/bar/archive/{version}.tar.gz
  #   https://github.com/foo/bar/archive/{version}.tar.gz
  #   https://gitlab.com/foo/bar/-/archive/v{version}/bar-v{version}.tar.gz
  #   https://downloads.sourceforge.net/foo/bar-{version}.tar.gz
  #   https://git.sr.ht/~foo/bar/archive/{version}.tar.gz
  #
  # .. note:: This option will has no meaningful effect unless you submit your
  #           package to official package repositories.

source_top_level: foo-{version}
  # The path inside a tarball downloaded from `source_url` to the directory
  # containing the ``pyproject.toml``.
  #
  # .. note:: This option will has no meaningful effect unless you submit your
  #           package to official package repositories.

spdx:
  MIT:
  CPL-1.0 WITH LZMA-exception:
  # The license(s) the project is released under, declared via SPDX_
  # identifiers. Dual licensed software should use multiple keys. SPDX
  # exceptions_ can by appended after a ``WITH`` separator. This option does not
  # need to be set if `polycotylus` can detect license `trove classifiers`_ and
  # is able to map them to SPDX codes without ambiguity. Use ``nonfree:`` for
  # closed source software or ``custom:`` if your open source license doesn't
  # have an SPDX identifier.
  #
  # .. _SPDX: https://spdx.org/licenses/
  # .. _exceptions: https://spdx.org/licenses/exceptions-index.html
  # .. _`trove classifiers`: https://pypi.org/classifiers/

architecture: aarch64 armhf armv7 ppc64le x86 x86_64
  # The architectures that this package may be installed on. Allowed
  # values are:
  #
  #  - ``noarch``: The package contains no compiled binaries. A build on one
  #    architecture will run as-is on another.
  #  - ``any``: The package may run on any architecture but must be recompiled
  #    for each one.
  #  - A subset of any of the listed architectures.
  #  - A list of architectures prefixed with ``!`` to imply ``any`` except the
  #    given architectures.
  #
  # Defaults to ``any`` if ``gcc`` or ``clang`` or any ``*-dev``/``*-devel``
  # packages are found in `dependencies.build.$distribution`; ``noarch``
  # otherwise.

contains_py_files: false
  # Whether or not the distributed parts (i.e. not including tests or build
  # scripts) of your package contains ``.py`` files. Setting to ``false`` will
  # disable any Python bytecode compilation steps and prevent a ``-pyc``
  # subpackage being generated on Alpine.

maintainer: Your Name <your.email@address.com>
  # Contact details for whoever's job it will be to fix it if there are issues.
  # If you plan to submit your package to official repositories then this must
  # be a real human being – not a support channel or mailing list. If
  # non-ambiguous, `polycotylus` will default to the ``project.maintainer``
  # field in the ``pyproject.toml``.

test_command: +pytest+ -k 'not unrunable_test'
  # A verification command, defaulting to ``+pytest+``. This command will be
  # invoked using ``sh`` from the root of a copy of your project but note that
  # only the files listed in `test_files` will be available when `polycotylus`
  # runs its end to end test. To accommodate distributions that like to
  # perpetuate `xkcd 1987`_, annotate commands coming from Python environments
  # by wrapping then in plus signs. i.e. Use ``+python+`` instead
  # ``python``/``python3`` or ``+pytest+`` instead of ``pytest`` so that
  # `polycotylus` can substitute them for whatever s̶i̶l̶l̶y̶ ̶m̶a̶c̶r̶o̶ *"abstraction"*
  # each RPM based distribution uses. Note that ``+python+ -m unittest`` is
  # supported but strongly discouraged in favour of `pytest's unittest support`_
  # due to its rather dangerous behaviour of not failing if no tests are found.
  # Testing can be disabled by setting `test_command` to an empty string
  # although, in the absence of a proper test suite, even a dumb ``+python+ -c
  # 'import my_package'`` is a lot better than nothing.
  #
  # .. _`pytest's unittest support`: https://docs.pytest.org/en/7.3.x/how-to/unittest.html
  # .. _`xkcd 1987`: https://xkcd.com/1987/

test_files:
  - tests
  - test_*.py
  - pytest.ini
  - conftest.py
  # The files needed to run the test suite. `polycotylus`, when testing the
  # final package, will mount only these files or directories into the test
  # container so that tests can't accidentally use your original source code
  # rather than the installed package. The patterns listed here are the
  # defaults. Setting this field replaces the defaults so remember to re-add any
  # of the default ones you need. Globs are expanded using `pathlib.Path.glob`.
  # All paths are relative to the directory containing the ``polycotylus.yaml``.

dependency_name_map:
  GitPython:
    debian: python3-git
  # An override for `polycotylus`\ 's mapping of pip/PyPI package to Linux
  # package equivalents. If one of your dependencies is available in the Linux
  # package repositories but `polycotylus` can't find it because it's been named
  # something that breaks the distribution's naming conventions, you can tell
  # `polycotylus` what its real name is here. Note that this option does not
  # exist for ``fedora`` due to its handling the mapping using package
  # *capabilities* rather than a naming pattern.


# --------------------
# CLI/GUI only options
# --------------------

frontend: true
  # A package which is not primarily a library intended to be imported by other
  # Python packages – rather it's a standalone CLI tool or GUI application that
  # merely happens to be written in Python – should set this field to ``true``.
  # When enabled, `polycotylus` will not apply the Linux distribution's standard
  # Python package prefix (e.g. ``py3-`` on Alpine or ``python-`` on Arch) to
  # the package's name and build for only one Python version on Linux
  # distributions that provide more than one Python version.

gui: true
  # Enable GUI support. The default is false unless the ``gui-scripts`` field in
  # the ``pyproject.toml`` is non-empty. Setting this field will enable XVFB_
  # display virtualisation so that GUIs can run inside Docker containers.

desktop_entry_points:
  # Desktop integration! Desktop files are the glue between your application and
  # the desktop. Creating one allows you to:

  # * Attach an icon, localised pretty name, keywords and summary description to
  #   your executable
  # * Have the application appear in desktops' application menus such as XFCE's
  #   whisker menu (akin to Windows's Start menu) or Gnome's App tiles.
  # * Register supported file types so that your desktop knows what files it can
  #   open with your application.
  #
  # This reference lists only the more compulsory subset of `recognised keys`_.
  # If you're ever unsure what a particular key does, you can normally find
  # examples by running ``grep KeyName /usr/share/applications/*.desktop`` on
  # any Linux machine with a desktop installed.
  #
  # .. _specification: https://specifications.freedesktop.org/desktop-entry-spec/latest/
  # .. _`recognised keys`: https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s06.html

  $identifier:
    # An identifier, which will ultimately become the ``.desktop`` file's
    # filename, is needed – usually either a sluggified (lowercase characters
    # and underscores only) version of the application's name or your
    # organisation and application names, both sluggified and joined by a hyphen
    # (``-``). The second form is typically only used if you provide a family of
    # applications (e.g. libreoffice or gnome).

    Name:
      '': My Application
      es: Mi Aplicación
      fr: Mon Application
        # Your application's localized *pretty name* where spaces and capital
        # letters are allowed and encouraged. If you don't want to support
        # multiple languages and locales then just ``Name: My Application`` is
        # also allowed.

    Exec: my_application %F
    # The `shell-like command executed`_ when launching the application. The
    # majority of the time, the executable's name followed by ``%f`` (a single
    # file) or ``%F`` (multiple files) is all you need (note the lack of quotes
    # around any ``%placeholder`` – the shell command is lexed before the
    # substitutions take place). Note also that the command is not truly shell
    # script so shell idioms such as ``$variable``, ``||`` or ``&&`` will not
    # work.
    #
    # .. _`shell-like command executed`: https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s07.html

    MimeType: image/bmp;image/gif;image/jpeg;image/png;image/tiff;video/mp4
    # Declare which file types your application can open. Desktops will respond
    # by adding your application to *Open With* dialogs in graphical file
    # managers. See Python's `mimetypes.types_map` for finding common mimetype
    # names. Traditional desktop file list items are delimited by ``;`` but you
    # may write mimetypes on separate lines instead for readability.

    icon: icon-source.svg
    # The icon to attach to the launcher. This should be a path, relative to the
    # directory containing the ``polycotylus.yaml``. The desktop specification
    # promotes using SVG since it can be scaled to arbitrary sizes but I have
    # yet to encounter a desktop environment that actually will use SVGs (even
    # if you take away all PNG alternatives) so a decent sized PNG is just as
    # sufficient. The provided icon should be square and either much larger than
    # 128x128px or an exact multiple in size to minimize resize aliasing.
    # `polycotylus` will handle the image resizing and conversion.

    actions:
      $action-identifier:
        Name: Some Custom Mode
        Exec: my_application --some-custom-mode %F
        icon: another-icon.svg
        # Desktop files support alternative launch modes, such as an incognito
        # mode for a web browser; these are referred to as *desktop file
        # actions*. Actions require an identifier, name and launch command and
        # may also take its own icon. The identifier may be any unique string
        # made up of only lowercase ASCII letters and hyphens. ``Name``,
        # ``Exec`` and ``icon`` take the same argument formats as their global
        # counterparts (`Name <desktop_entry_points.$identifier.Name>`, `Exec
        # <desktop_entry_points.$identifier.Exec>` and `icon
        # <desktop_entry_points.$identifier.icon>`).
