There are a few ways to test an audio application inside a Docker container. One way is to use the ALSA sound system. You can do this by mounting the `/dev/snd` directory from the host to the container using the `-v` option when running the container, like this: `docker run -ti --rm -v /dev/snd:/dev/snd myContainer sh -c "echo run something"`. If you are using a non-root user inside the container, you may need to give it access to audio devices by adding the user to the `audio` group in your Dockerfile, like this: `RUN usermod -a -G audio USERNAME`.

Another way is to use PulseAudio. To do this, you need to mount several directories and environment variables from the host to the container, including `/dev/shm`, `/etc/machine-id`, `/run/user/$uid/pulse`, `/var/lib/dbus`, and `~/.pulse`. You also need to set the `XDG_RUNTIME_DIR` environment variable to be the same in both the host system and the Docker container. Here is an example command that mounts these directories and sets the environment variable: `docker run -ti --rm -v /dev/shm:/dev/shm -v /etc/machine-id:/etc/machine-id -v /run/user/$uid/pulse:/run/user/$uid/pulse -v /var/lib/dbus:/var/lib/dbus -v ~/.pulse:/home/$dockerUsername/.pulse myContainer sh -c "echo run something"`.

Once you have set up either ALSA or PulseAudio, you can test your audio application inside the Docker container by running it as you normally would. You can also use tools like `speaker-test` (for ALSA) or `paplay` (for PulseAudio) to test that audio is working correctly.
